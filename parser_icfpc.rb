#!/usr/bin/env ruby
# Autogenerated from a Treetop grammar. Edits may be lost.



require 'treetop'

module ProgramRules
  include Treetop::Runtime

  def root
    @root ||= :program
  end

  module Program0
    def ws1
      elements[2]
    end

    def ws2
      elements[4]
    end

    def x
      elements[5]
    end

    def ws3
      elements[6]
    end

    def ws4
      elements[8]
    end

    def a
      elements[9]
    end

    def ws5
      elements[10]
    end

  end

  module Program1
    def value
      [a.value]
    end
  end

  def _nt_program
    start_index = index
    if node_cache[:program].has_key?(index)
      cached = node_cache[:program][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    if has_terminal?("(", false, index)
      r1 = instantiate_node(SyntaxNode,input, index...(index + 1))
      @index += 1
    else
      terminal_parse_failure("(")
      r1 = nil
    end
    s0 << r1
    if r1
      if has_terminal?("lambda", false, index)
        r2 = instantiate_node(SyntaxNode,input, index...(index + 6))
        @index += 6
      else
        terminal_parse_failure("lambda")
        r2 = nil
      end
      s0 << r2
      if r2
        r3 = _nt_ws
        s0 << r3
        if r3
          if has_terminal?("(", false, index)
            r4 = instantiate_node(SyntaxNode,input, index...(index + 1))
            @index += 1
          else
            terminal_parse_failure("(")
            r4 = nil
          end
          s0 << r4
          if r4
            r5 = _nt_ws
            s0 << r5
            if r5
              r6 = _nt_id
              s0 << r6
              if r6
                r7 = _nt_ws
                s0 << r7
                if r7
                  if has_terminal?(")", false, index)
                    r8 = instantiate_node(SyntaxNode,input, index...(index + 1))
                    @index += 1
                  else
                    terminal_parse_failure(")")
                    r8 = nil
                  end
                  s0 << r8
                  if r8
                    r9 = _nt_ws
                    s0 << r9
                    if r9
                      r10 = _nt_e
                      s0 << r10
                      if r10
                        r11 = _nt_ws
                        s0 << r11
                        if r11
                          if has_terminal?(")", false, index)
                            r12 = instantiate_node(SyntaxNode,input, index...(index + 1))
                            @index += 1
                          else
                            terminal_parse_failure(")")
                            r12 = nil
                          end
                          s0 << r12
                        end
                      end
                    end
                  end
                end
              end
            end
          end
        end
      end
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(Program0)
      r0.extend(Program1)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:program][start_index] = r0

    r0
  end

  module E0
    def h
      elements[0]
    end
  end

  module E1
    def value
      h.value
    end
  end

  def _nt_e
    start_index = index
    if node_cache[:e].has_key?(index)
      cached = node_cache[:e][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    i1 = index
    r2 = _nt_scalar
    if r2
      r1 = r2
    else
      r3 = _nt_id
      if r3
        r1 = r3
      else
        r4 = _nt_e_if0
        if r4
          r1 = r4
        else
          r5 = _nt_e_fold
          if r5
            r1 = r5
          else
            r6 = _nt_e_op1
            if r6
              r1 = r6
            else
              r7 = _nt_e_op2
              if r7
                r1 = r7
              else
                @index = i1
                r1 = nil
              end
            end
          end
        end
      end
    end
    s0 << r1
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(E0)
      r0.extend(E1)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:e][start_index] = r0

    r0
  end

  module Scalar0
    def value
      text_value.to_i
    end
  end

  def _nt_scalar
    start_index = index
    if node_cache[:scalar].has_key?(index)
      cached = node_cache[:scalar][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0 = index
    if has_terminal?("0", false, index)
      r1 = instantiate_node(SyntaxNode,input, index...(index + 1))
      @index += 1
    else
      terminal_parse_failure("0")
      r1 = nil
    end
    if r1
      r0 = r1
      r0.extend(Scalar0)
    else
      if has_terminal?("1", false, index)
        r2 = instantiate_node(SyntaxNode,input, index...(index + 1))
        @index += 1
      else
        terminal_parse_failure("1")
        r2 = nil
      end
      if r2
        r0 = r2
        r0.extend(Scalar0)
      else
        @index = i0
        r0 = nil
      end
    end

    node_cache[:scalar][start_index] = r0

    r0
  end

  module EIf00
    def S1
      elements[2]
    end

    def x
      elements[3]
    end

    def S2
      elements[4]
    end

    def y
      elements[5]
    end

    def S3
      elements[6]
    end

    def z
      elements[7]
    end

    def ws
      elements[8]
    end

  end

  module EIf01
    def value
      ['if0', x.value, y.value, z.value]
    end
  end

  def _nt_e_if0
    start_index = index
    if node_cache[:e_if0].has_key?(index)
      cached = node_cache[:e_if0][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    if has_terminal?("(", false, index)
      r1 = instantiate_node(SyntaxNode,input, index...(index + 1))
      @index += 1
    else
      terminal_parse_failure("(")
      r1 = nil
    end
    s0 << r1
    if r1
      if has_terminal?("if0", false, index)
        r2 = instantiate_node(SyntaxNode,input, index...(index + 3))
        @index += 3
      else
        terminal_parse_failure("if0")
        r2 = nil
      end
      s0 << r2
      if r2
        r3 = _nt_S
        s0 << r3
        if r3
          r4 = _nt_e
          s0 << r4
          if r4
            r5 = _nt_S
            s0 << r5
            if r5
              r6 = _nt_e
              s0 << r6
              if r6
                r7 = _nt_S
                s0 << r7
                if r7
                  r8 = _nt_e
                  s0 << r8
                  if r8
                    r9 = _nt_ws
                    s0 << r9
                    if r9
                      if has_terminal?(")", false, index)
                        r10 = instantiate_node(SyntaxNode,input, index...(index + 1))
                        @index += 1
                      else
                        terminal_parse_failure(")")
                        r10 = nil
                      end
                      s0 << r10
                    end
                  end
                end
              end
            end
          end
        end
      end
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(EIf00)
      r0.extend(EIf01)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:e_if0][start_index] = r0

    r0
  end

  module EFold0
    def S1
      elements[2]
    end

    def a
      elements[3]
    end

    def S2
      elements[4]
    end

    def b
      elements[5]
    end

    def ws1
      elements[6]
    end

    def ws2
      elements[9]
    end

    def ws3
      elements[11]
    end

    def x
      elements[12]
    end

    def S3
      elements[13]
    end

    def y
      elements[14]
    end

    def ws4
      elements[15]
    end

    def ws5
      elements[17]
    end

    def c
      elements[18]
    end

    def ws6
      elements[19]
    end

    def ws7
      elements[21]
    end

  end

  module EFold1
    def value
      ['fold', a.value, b.value, ['lambda', x.value, y.value, c.value]]
    end
  end

  def _nt_e_fold
    start_index = index
    if node_cache[:e_fold].has_key?(index)
      cached = node_cache[:e_fold][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    if has_terminal?("(", false, index)
      r1 = instantiate_node(SyntaxNode,input, index...(index + 1))
      @index += 1
    else
      terminal_parse_failure("(")
      r1 = nil
    end
    s0 << r1
    if r1
      if has_terminal?("fold", false, index)
        r2 = instantiate_node(SyntaxNode,input, index...(index + 4))
        @index += 4
      else
        terminal_parse_failure("fold")
        r2 = nil
      end
      s0 << r2
      if r2
        r3 = _nt_S
        s0 << r3
        if r3
          r4 = _nt_e
          s0 << r4
          if r4
            r5 = _nt_S
            s0 << r5
            if r5
              r6 = _nt_e
              s0 << r6
              if r6
                r7 = _nt_ws
                s0 << r7
                if r7
                  if has_terminal?("(", false, index)
                    r8 = instantiate_node(SyntaxNode,input, index...(index + 1))
                    @index += 1
                  else
                    terminal_parse_failure("(")
                    r8 = nil
                  end
                  s0 << r8
                  if r8
                    if has_terminal?("lambda", false, index)
                      r9 = instantiate_node(SyntaxNode,input, index...(index + 6))
                      @index += 6
                    else
                      terminal_parse_failure("lambda")
                      r9 = nil
                    end
                    s0 << r9
                    if r9
                      r10 = _nt_ws
                      s0 << r10
                      if r10
                        if has_terminal?("(", false, index)
                          r11 = instantiate_node(SyntaxNode,input, index...(index + 1))
                          @index += 1
                        else
                          terminal_parse_failure("(")
                          r11 = nil
                        end
                        s0 << r11
                        if r11
                          r12 = _nt_ws
                          s0 << r12
                          if r12
                            r13 = _nt_id
                            s0 << r13
                            if r13
                              r14 = _nt_S
                              s0 << r14
                              if r14
                                r15 = _nt_id
                                s0 << r15
                                if r15
                                  r16 = _nt_ws
                                  s0 << r16
                                  if r16
                                    if has_terminal?(")", false, index)
                                      r17 = instantiate_node(SyntaxNode,input, index...(index + 1))
                                      @index += 1
                                    else
                                      terminal_parse_failure(")")
                                      r17 = nil
                                    end
                                    s0 << r17
                                    if r17
                                      r18 = _nt_ws
                                      s0 << r18
                                      if r18
                                        r19 = _nt_e
                                        s0 << r19
                                        if r19
                                          r20 = _nt_ws
                                          s0 << r20
                                          if r20
                                            if has_terminal?(")", false, index)
                                              r21 = instantiate_node(SyntaxNode,input, index...(index + 1))
                                              @index += 1
                                            else
                                              terminal_parse_failure(")")
                                              r21 = nil
                                            end
                                            s0 << r21
                                            if r21
                                              r22 = _nt_ws
                                              s0 << r22
                                              if r22
                                                if has_terminal?(")", false, index)
                                                  r23 = instantiate_node(SyntaxNode,input, index...(index + 1))
                                                  @index += 1
                                                else
                                                  terminal_parse_failure(")")
                                                  r23 = nil
                                                end
                                                s0 << r23
                                              end
                                            end
                                          end
                                        end
                                      end
                                    end
                                  end
                                end
                              end
                            end
                          end
                        end
                      end
                    end
                  end
                end
              end
            end
          end
        end
      end
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(EFold0)
      r0.extend(EFold1)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:e_fold][start_index] = r0

    r0
  end

  module EOp10
    def o
      elements[1]
    end

    def S
      elements[2]
    end

    def a
      elements[3]
    end

    def ws
      elements[4]
    end

  end

  module EOp11
    def value
      [o.value, a.value]
    end
  end

  def _nt_e_op1
    start_index = index
    if node_cache[:e_op1].has_key?(index)
      cached = node_cache[:e_op1][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    if has_terminal?("(", false, index)
      r1 = instantiate_node(SyntaxNode,input, index...(index + 1))
      @index += 1
    else
      terminal_parse_failure("(")
      r1 = nil
    end
    s0 << r1
    if r1
      r2 = _nt_op1
      s0 << r2
      if r2
        r3 = _nt_S
        s0 << r3
        if r3
          r4 = _nt_e
          s0 << r4
          if r4
            r5 = _nt_ws
            s0 << r5
            if r5
              if has_terminal?(")", false, index)
                r6 = instantiate_node(SyntaxNode,input, index...(index + 1))
                @index += 1
              else
                terminal_parse_failure(")")
                r6 = nil
              end
              s0 << r6
            end
          end
        end
      end
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(EOp10)
      r0.extend(EOp11)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:e_op1][start_index] = r0

    r0
  end

  module EOp20
    def o
      elements[1]
    end

    def S1
      elements[2]
    end

    def a
      elements[3]
    end

    def S2
      elements[4]
    end

    def b
      elements[5]
    end

    def ws
      elements[6]
    end

  end

  module EOp21
    def value
      [o.value, a.value, b.value]
    end
  end

  def _nt_e_op2
    start_index = index
    if node_cache[:e_op2].has_key?(index)
      cached = node_cache[:e_op2][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    if has_terminal?("(", false, index)
      r1 = instantiate_node(SyntaxNode,input, index...(index + 1))
      @index += 1
    else
      terminal_parse_failure("(")
      r1 = nil
    end
    s0 << r1
    if r1
      r2 = _nt_op2
      s0 << r2
      if r2
        r3 = _nt_S
        s0 << r3
        if r3
          r4 = _nt_e
          s0 << r4
          if r4
            r5 = _nt_S
            s0 << r5
            if r5
              r6 = _nt_e
              s0 << r6
              if r6
                r7 = _nt_ws
                s0 << r7
                if r7
                  if has_terminal?(")", false, index)
                    r8 = instantiate_node(SyntaxNode,input, index...(index + 1))
                    @index += 1
                  else
                    terminal_parse_failure(")")
                    r8 = nil
                  end
                  s0 << r8
                end
              end
            end
          end
        end
      end
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(EOp20)
      r0.extend(EOp21)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:e_op2][start_index] = r0

    r0
  end

  module Op10
    def value
      text_value
    end
  end

  def _nt_op1
    start_index = index
    if node_cache[:op1].has_key?(index)
      cached = node_cache[:op1][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0 = index
    if has_terminal?("not", false, index)
      r1 = instantiate_node(SyntaxNode,input, index...(index + 3))
      @index += 3
    else
      terminal_parse_failure("not")
      r1 = nil
    end
    if r1
      r0 = r1
      r0.extend(Op10)
    else
      if has_terminal?("shl1", false, index)
        r2 = instantiate_node(SyntaxNode,input, index...(index + 4))
        @index += 4
      else
        terminal_parse_failure("shl1")
        r2 = nil
      end
      if r2
        r0 = r2
        r0.extend(Op10)
      else
        if has_terminal?("shr1", false, index)
          r3 = instantiate_node(SyntaxNode,input, index...(index + 4))
          @index += 4
        else
          terminal_parse_failure("shr1")
          r3 = nil
        end
        if r3
          r0 = r3
          r0.extend(Op10)
        else
          if has_terminal?("shr4", false, index)
            r4 = instantiate_node(SyntaxNode,input, index...(index + 4))
            @index += 4
          else
            terminal_parse_failure("shr4")
            r4 = nil
          end
          if r4
            r0 = r4
            r0.extend(Op10)
          else
            if has_terminal?("shr16", false, index)
              r5 = instantiate_node(SyntaxNode,input, index...(index + 5))
              @index += 5
            else
              terminal_parse_failure("shr16")
              r5 = nil
            end
            if r5
              r0 = r5
              r0.extend(Op10)
            else
              @index = i0
              r0 = nil
            end
          end
        end
      end
    end

    node_cache[:op1][start_index] = r0

    r0
  end

  module Op20
    def value
      text_value
    end
  end

  def _nt_op2
    start_index = index
    if node_cache[:op2].has_key?(index)
      cached = node_cache[:op2][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0 = index
    if has_terminal?("and", false, index)
      r1 = instantiate_node(SyntaxNode,input, index...(index + 3))
      @index += 3
    else
      terminal_parse_failure("and")
      r1 = nil
    end
    if r1
      r0 = r1
      r0.extend(Op20)
    else
      if has_terminal?("or", false, index)
        r2 = instantiate_node(SyntaxNode,input, index...(index + 2))
        @index += 2
      else
        terminal_parse_failure("or")
        r2 = nil
      end
      if r2
        r0 = r2
        r0.extend(Op20)
      else
        if has_terminal?("xor", false, index)
          r3 = instantiate_node(SyntaxNode,input, index...(index + 3))
          @index += 3
        else
          terminal_parse_failure("xor")
          r3 = nil
        end
        if r3
          r0 = r3
          r0.extend(Op20)
        else
          if has_terminal?("plus", false, index)
            r4 = instantiate_node(SyntaxNode,input, index...(index + 4))
            @index += 4
          else
            terminal_parse_failure("plus")
            r4 = nil
          end
          if r4
            r0 = r4
            r0.extend(Op20)
          else
            @index = i0
            r0 = nil
          end
        end
      end
    end

    node_cache[:op2][start_index] = r0

    r0
  end

  module Id0
  end

  module Id1
    def value
      text_value
    end
  end

  def _nt_id
    start_index = index
    if node_cache[:id].has_key?(index)
      cached = node_cache[:id][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    if has_terminal?('\G[a-z]', true, index)
      r1 = true
      @index += 1
    else
      r1 = nil
    end
    s0 << r1
    if r1
      s2, i2 = [], index
      loop do
        if has_terminal?('\G[a-z_0-9]', true, index)
          r3 = true
          @index += 1
        else
          r3 = nil
        end
        if r3
          s2 << r3
        else
          break
        end
      end
      r2 = instantiate_node(SyntaxNode,input, i2...index, s2)
      s0 << r2
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(Id0)
      r0.extend(Id1)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:id][start_index] = r0

    r0
  end

  def _nt_ws
    start_index = index
    if node_cache[:ws].has_key?(index)
      cached = node_cache[:ws][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    r1 = _nt_S
    if r1
      r0 = r1
    else
      r0 = instantiate_node(SyntaxNode,input, index...index)
    end

    node_cache[:ws][start_index] = r0

    r0
  end

  def _nt_S
    start_index = index
    if node_cache[:S].has_key?(index)
      cached = node_cache[:S][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    s0, i0 = [], index
    loop do
      if has_terminal?('\G[\\s]', true, index)
        r1 = true
        @index += 1
      else
        r1 = nil
      end
      if r1
        s0 << r1
      else
        break
      end
    end
    if s0.empty?
      @index = i0
      r0 = nil
    else
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
    end

    node_cache[:S][start_index] = r0

    r0
  end

end

class ProgramRulesParser < Treetop::Runtime::CompiledParser
  include ProgramRules
end

